# pylint: disable=bad-indentation

"""
Advent of Code Day 8 Part 1.
"""

RELATIVE_PATH = "../inputs/input.txt"
RELATIVE_PATH_TEST = "../inputs/short.txt"

def solution():
  """Solution"""

  antenna_map = []

  with open(RELATIVE_PATH, 'r', encoding='utf-8') as f:
    for line in f.readlines() :
      antenna_map.append('.' + line.replace('\n', ''))

  return len(generate_antinode_map(antenna_map))

def generate_antinode_map(mapp):
  """Generates the antinode map"""

  antenna_positions = register_antennas(mapp)

  antinode_map = []

  for _, antennas in antenna_positions.items():
    antenna_size = len(antennas)
    for i in range(antenna_size):
      for j in range(i + 1, antenna_size):
        for antinode in generate_antinode(antennas[i], antennas[j], mapp):
          if antinode not in antinode_map:
            antinode_map.append(antinode)

  return antinode_map

def generate_antinode(point_a: tuple[int, int], point_b: tuple[int, int], mapp: list[list]):
  """Returns the given antinode(s) generated by antennas located on point_a and point_b"""

  antinode_1 = (2* point_a[0] - point_b[0], 2* point_a[1] - point_b[1])
  antinode_2 = (2* point_b[0] - point_a[0], 2* point_b[1] - point_a[1])

  antinodes_coords = []

  if is_in_map(mapp, antinode_1):
    antinodes_coords.append(antinode_1)

  if is_in_map(mapp, antinode_2):
    antinodes_coords.append(antinode_2)

  return antinodes_coords

def register_antennas(mapp: list[list]):
  """Register all antennas on the map"""

  antennas = {}
  lines = len(mapp)
  columns = len(mapp[0])

  for i in range(lines):
    for j in range(columns):
      symbol = mapp[i][j]
      if symbol not in ['.', '\n']:
        if symbol in antennas:
          antennas[symbol].append((i, j))
        else:
          antennas[symbol] = [(i, j)]

  return antennas

def is_in_map(mapp: list[list], point: tuple[int, int]):
  """Tells whether a point is in the map or not"""

  lines = len(mapp)
  columns = len(mapp[0])

  return point[0] >= 1 and point[0] < lines and point[1] >= 1 and point[1] < columns

if __name__ == "__main__":
  print(solution())
